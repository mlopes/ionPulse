%{
#include "phpParser/gen_php_parser.hpp"
#include "phpParser/ionParserLib.h"

#define YY_DECL int ion_php_lex(pASTNode *astNode)

%}
LNUM	[0-9]+
DNUM	([0-9]*"."[0-9]+)|([0-9]+"."[0-9]*)
EXPONENT_DNUM	(({LNUM}|{DNUM})[eE][+-]?{LNUM})
HNUM	"0x"[0-9a-fA-F]+
LABEL	[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*
WHITESPACE [ \n\r\t]+
TABS_AND_SPACES [ \t]*
TOKENS [;:,.\[\]()|^&+-/*=%!~$<>?@]
ANY_CHAR [.]
NEWLINE ("\r"|"\n"|"\r\n")

%option stack
%x ST_IN_SCRIPTING
%x ST_LOOKING_FOR_PROPERTY
%x ST_LOOKING_FOR_VARNAME
%s ST_DOUBLE_QUOTES
%s ST_BACKQUOTE
%s ST_HEREDOC
%s ST_NOWDOC
%s ST_VAR_OFFSET
%x ST_END_HEREDOC
%%

<ST_IN_SCRIPTING>"exit" {
        return T_EXIT;
}

<ST_IN_SCRIPTING>"die" {
        return T_EXIT;
}

<ST_IN_SCRIPTING>"function" {
        return T_FUNCTION;
}

<ST_IN_SCRIPTING>"const" {
        return T_CONST;
}

<ST_IN_SCRIPTING>"return" {
        return T_RETURN;
}

<ST_IN_SCRIPTING>"try" {
        return T_TRY;
}

<ST_IN_SCRIPTING>"catch" {
        return T_CATCH;
}

<ST_IN_SCRIPTING>"throw" {
        return T_THROW;
}

<ST_IN_SCRIPTING>"if" {
        return T_IF;
}

<ST_IN_SCRIPTING>"elseif" {
        return T_ELSEIF;
}

<ST_IN_SCRIPTING>"endif" {
        return T_ENDIF;
}

<ST_IN_SCRIPTING>"else" {
        return T_ELSE;
}

<ST_IN_SCRIPTING>"while" {
        return T_WHILE;
}

<ST_IN_SCRIPTING>"endwhile" {
        return T_ENDWHILE;
}

<ST_IN_SCRIPTING>"do" {
        return T_DO;
}

<ST_IN_SCRIPTING>"for" {
        return T_FOR;
}

<ST_IN_SCRIPTING>"endfor" {
        return T_ENDFOR;
}

<ST_IN_SCRIPTING>"foreach" {
        return T_FOREACH;
}

<ST_IN_SCRIPTING>"endforeach" {
        return T_ENDFOREACH;
}

<ST_IN_SCRIPTING>"declare" {
        return T_DECLARE;
}

<ST_IN_SCRIPTING>"enddeclare" {
        return T_ENDDECLARE;
}

<ST_IN_SCRIPTING>"instanceof" {
        return T_INSTANCEOF;
}

<ST_IN_SCRIPTING>"as" {
        return T_AS;
}

<ST_IN_SCRIPTING>"switch" {
        return T_SWITCH;
}

<ST_IN_SCRIPTING>"endswitch" {
        return T_ENDSWITCH;
}

<ST_IN_SCRIPTING>"case" {
        return T_CASE;
}

<ST_IN_SCRIPTING>"default" {
        return T_DEFAULT;
}

<ST_IN_SCRIPTING>"break" {
        return T_BREAK;
}

<ST_IN_SCRIPTING>"continue" {
        return T_CONTINUE;
}

<ST_IN_SCRIPTING>"goto" {
        return T_GOTO;
}

<ST_IN_SCRIPTING>"echo" {
        return T_ECHO;
}

<ST_IN_SCRIPTING>"print" {
        return T_PRINT;
}

<ST_IN_SCRIPTING>"class" {
        return T_CLASS;
}

<ST_IN_SCRIPTING>"interface" {
        return T_INTERFACE;
}

<ST_IN_SCRIPTING>"extends" {
        return T_EXTENDS;
}

<ST_IN_SCRIPTING>"implements" {
        return T_IMPLEMENTS;
}

<ST_IN_SCRIPTING>"->" {
        yy_push_state(ST_LOOKING_FOR_PROPERTY);
        return T_OBJECT_OPERATOR;
}

<ST_IN_SCRIPTING,ST_LOOKING_FOR_PROPERTY>{WHITESPACE}+ {
        *astNode = ASTNode::create("T_WHITESPACE")->setData("text", yytext);
        return T_WHITESPACE;
}

<ST_LOOKING_FOR_PROPERTY>"->" {
        return T_OBJECT_OPERATOR;
}

<ST_LOOKING_FOR_PROPERTY>{LABEL} {
        yy_pop_state();
        *astNode = ASTNode::create("T_STRING")->setData("text", yytext);
        return T_STRING;
}

<ST_LOOKING_FOR_PROPERTY>{ANY_CHAR} {
        yyless(0);
        yy_pop_state();
        goto restart;
}

<ST_IN_SCRIPTING>"::" {
        return T_PAAMAYIM_NEKUDOTAYIM;
}

<ST_IN_SCRIPTING>"\\" {
        return T_NS_SEPARATOR;
}

<ST_IN_SCRIPTING>"new" {
        return T_NEW;
}

<ST_IN_SCRIPTING>"clone" {
        return T_CLONE;
}

<ST_IN_SCRIPTING>"var" {
        return T_VAR;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}("int"|"integer"){TABS_AND_SPACES}")" {
        return T_INT_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}("real"|"double"|"float"){TABS_AND_SPACES}")" {
        return T_DOUBLE_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}"string"{TABS_AND_SPACES}")" {
        return T_STRING_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}"binary"{TABS_AND_SPACES}")" {
        return T_STRING_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}"array"{TABS_AND_SPACES}")" {
        return T_ARRAY_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}"object"{TABS_AND_SPACES}")" {
        return T_OBJECT_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}("bool"|"boolean"){TABS_AND_SPACES}")" {
        return T_BOOL_CAST;
}

<ST_IN_SCRIPTING>"("{TABS_AND_SPACES}("unset"){TABS_AND_SPACES}")" {
        return T_UNSET_CAST;
}

<ST_IN_SCRIPTING>"eval" {
        return T_EVAL;
}

<ST_IN_SCRIPTING>"include" {
        return T_INCLUDE;
}

<ST_IN_SCRIPTING>"include_once" {
        return T_INCLUDE_ONCE;
}

<ST_IN_SCRIPTING>"require" {
        return T_REQUIRE;
}

<ST_IN_SCRIPTING>"require_once" {
        return T_REQUIRE_ONCE;
}

<ST_IN_SCRIPTING>"namespace" {
        return T_NAMESPACE;
}

<ST_IN_SCRIPTING>"use" {
        return T_USE;
}

<ST_IN_SCRIPTING>"global" {
        return T_GLOBAL;
}

<ST_IN_SCRIPTING>"isset" {
        return T_ISSET;
}

<ST_IN_SCRIPTING>"empty" {
        return T_EMPTY;
}

<ST_IN_SCRIPTING>"__halt_compiler" {
        return T_HALT_COMPILER;
}

<ST_IN_SCRIPTING>"static" {
        return T_STATIC;
}

<ST_IN_SCRIPTING>"abstract" {
        return T_ABSTRACT;
}

<ST_IN_SCRIPTING>"final" {
        return T_FINAL;
}

<ST_IN_SCRIPTING>"private" {
        return T_PRIVATE;
}

<ST_IN_SCRIPTING>"protected" {
        return T_PROTECTED;
}

<ST_IN_SCRIPTING>"public" {
        return T_PUBLIC;
}

<ST_IN_SCRIPTING>"unset" {
        return T_UNSET;
}

<ST_IN_SCRIPTING>"=>" {
        return T_DOUBLE_ARROW;
}

<ST_IN_SCRIPTING>"list" {
        return T_LIST;
}

<ST_IN_SCRIPTING>"array" {
        return T_ARRAY;
}

<ST_IN_SCRIPTING>"++" {
        return T_INC;
}

<ST_IN_SCRIPTING>"--" {
        return T_DEC;
}

<ST_IN_SCRIPTING>"===" {
        return T_IS_IDENTICAL;
}

<ST_IN_SCRIPTING>"!==" {
        return T_IS_NOT_IDENTICAL;
}

<ST_IN_SCRIPTING>"==" {
        return T_IS_EQUAL;
}

<ST_IN_SCRIPTING>"!="|"<>" {
        return T_IS_NOT_EQUAL;
}

<ST_IN_SCRIPTING>"<=" {
        return T_IS_SMALLER_OR_EQUAL;
}

<ST_IN_SCRIPTING>">=" {
        return T_IS_GREATER_OR_EQUAL;
}

<ST_IN_SCRIPTING>"+=" {
        return T_PLUS_EQUAL;
}

<ST_IN_SCRIPTING>"-=" {
        return T_MINUS_EQUAL;
}

<ST_IN_SCRIPTING>"*=" {
        return T_MUL_EQUAL;
}

<ST_IN_SCRIPTING>"/=" {
        return T_DIV_EQUAL;
}

<ST_IN_SCRIPTING>".=" {
        return T_CONCAT_EQUAL;
}

<ST_IN_SCRIPTING>"%=" {
        return T_MOD_EQUAL;
}

<ST_IN_SCRIPTING>"<<=" {
        return T_SL_EQUAL;
}

<ST_IN_SCRIPTING>">>=" {
        return T_SR_EQUAL;
}

<ST_IN_SCRIPTING>"&=" {
        return T_AND_EQUAL;
}

<ST_IN_SCRIPTING>"|=" {
        return T_OR_EQUAL;
}

<ST_IN_SCRIPTING>"^=" {
        return T_XOR_EQUAL;
}

<ST_IN_SCRIPTING>"||" {
        return T_BOOLEAN_OR;
}

<ST_IN_SCRIPTING>"&&" {
        return T_BOOLEAN_AND;
}

<ST_IN_SCRIPTING>"OR" {
        return T_LOGICAL_OR;
}

<ST_IN_SCRIPTING>"AND" {
        return T_LOGICAL_AND;
}

<ST_IN_SCRIPTING>"XOR" {
        return T_LOGICAL_XOR;
}

<ST_IN_SCRIPTING>"<<" {
        return T_SL;
}

<ST_IN_SCRIPTING>">>" {
        return T_SR;
}

<ST_IN_SCRIPTING>{TOKENS} {
        return yytext[0];
}


<ST_IN_SCRIPTING>"{" {
        yy_push_state(ST_IN_SCRIPTING);
        return '{';
}


<ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>"${" {
        yy_push_state(ST_LOOKING_FOR_VARNAME);
        return T_DOLLAR_OPEN_CURLY_BRACES;
}


<ST_IN_SCRIPTING>"}" {
        // was pushed in all occurences of '{'
        yy_pop_state();
        return '}';
}


<ST_LOOKING_FOR_VARNAME>{LABEL} {
        *astNode = ASTNode::create("T_STRING_VARNAME")->setData("text", yytext);
        yy_pop_state();
        yy_push_state(ST_IN_SCRIPTING);
        return T_STRING_VARNAME;
}


<ST_LOOKING_FOR_VARNAME>{ANY_CHAR} {
        yyless(0);
        yy_pop_state();
        yy_push_state(ST_IN_SCRIPTING);
        goto restart;
}


<ST_IN_SCRIPTING>{LNUM}|{HNUM} {
        *astNode = ASTNode::create("T_LNUMBER")->setData("text", yytext);
        return T_LNUMBER;
}

<ST_VAR_OFFSET>[0]|([1-9][0-9]*) { /* Offset could be treated as a long */
        *astNode = ASTNode::create("T_NUM_STRING")->setData("text", yytext);
        return T_NUM_STRING;
}

<ST_VAR_OFFSET>{LNUM}|{HNUM} { /* Offset must be treated as a string */
        *astNode = ASTNode::create("T_NUM_STRING")->setData("text", yytext);
        return T_NUM_STRING;
}

<ST_IN_SCRIPTING>{DNUM}|{EXPONENT_DNUM} {
        *astNode = ASTNode::create("T_DNUMBER")->setData("text", yytext);
        return T_DNUMBER;
}

<ST_IN_SCRIPTING>"__CLASS__" {
        return T_CLASS_C;
}

<ST_IN_SCRIPTING>"__FUNCTION__" {
        return T_FUNC_C;
}

<ST_IN_SCRIPTING>"__METHOD__" {
        return T_METHOD_C;
}

<ST_IN_SCRIPTING>"__LINE__" {
        return T_LINE;
}

<ST_IN_SCRIPTING>"__FILE__" {
        return T_FILE;
}

<ST_IN_SCRIPTING>"__DIR__" {
        return T_DIR;
}

<ST_IN_SCRIPTING>"__NAMESPACE__" {
        return T_NS_C;
}

<INITIAL>"<script"{WHITESPACE}+"language"{WHITESPACE}*"="{WHITESPACE}*("php"|"\"php\""|"'php'"){WHITESPACE}*">" {
        BEGIN(ST_IN_SCRIPTING);
        return T_OPEN_TAG;
}


<INITIAL>"<%=" {
        // OPTION: IF ASP TAGS?
        BEGIN(ST_IN_SCRIPTING);
        return T_OPEN_TAG_WITH_ECHO;
}


<INITIAL>"<?=" {
        // OPTIONS: SHORT TAGS
        BEGIN(ST_IN_SCRIPTING);
        return T_OPEN_TAG_WITH_ECHO;

        /*} else {
                goto inline_char_handler;
        }*/
}


<INITIAL>"<%" {
        // OPTION: IF ASP TAGS?
                BEGIN(ST_IN_SCRIPTING);
                return T_OPEN_TAG;

}


<INITIAL>"<?php"([ \t]|{NEWLINE}) {
        BEGIN(ST_IN_SCRIPTING);
        return T_OPEN_TAG;
}


<INITIAL>"<?" {
        // OPTIONS: SHORT TAGS
                BEGIN(ST_IN_SCRIPTING);
                return T_OPEN_TAG;

}

<INITIAL>([^<])+ {
inline_char_handler:
inline_html:
        *astNode = ASTNode::create("T_INLINE_HTML")->setData("text", yytext);
        return T_INLINE_HTML;
}

<INITIAL>"<" {
        goto inline_char_handler;
}

<ST_DOUBLE_QUOTES,ST_HEREDOC,ST_BACKQUOTE>"$"{LABEL}"->"[a-zA-Z_\x7f-\xff] {
            /* Make sure a label character follows "->", otherwise there is no property
             * and "->" will be taken literally
             */
        yyless(yyleng - 3);
        yy_push_state(ST_LOOKING_FOR_PROPERTY);
        *astNode = ASTNode::create("T_VARIABLE")->setData("text", yytext);
        return T_VARIABLE;
}

<ST_DOUBLE_QUOTES,ST_HEREDOC,ST_BACKQUOTE>"$"{LABEL}"[" {
        /* A [ always designates a variable offset, regardless of what follows
         */
        yyless(yyleng - 1);
        yy_push_state(ST_VAR_OFFSET);
        *astNode = ASTNode::create("T_VARIABLE")->setData("text", yytext);
        return T_VARIABLE;
}

<ST_IN_SCRIPTING,ST_DOUBLE_QUOTES,ST_HEREDOC,ST_BACKQUOTE,ST_VAR_OFFSET>"$"{LABEL} {
        *astNode = ASTNode::create("T_VARIABLE")->setData("text", yytext);
        return T_VARIABLE;
}

<ST_VAR_OFFSET>"]" {
        yy_pop_state();
        return ']';
}

<ST_VAR_OFFSET>{TOKENS}|[{}"`] {
        /* Only '[' can be valid, but returning other tokens will allow a more explicit parse error */
        return yytext[0];
}

<ST_VAR_OFFSET>[ \n\r\t\\'#] {
        /* Invalid rule to return a more explicit parse error with proper line number */
        yyless(0);
        yy_pop_state();
        return T_ENCAPSED_AND_WHITESPACE;
}

<ST_IN_SCRIPTING,ST_VAR_OFFSET>{LABEL} {
        *astNode = ASTNode::create("T_STRING")->setData("text", yytext);
        return T_STRING;
}


<ST_IN_SCRIPTING>"#"|"//" {
        while (YYCURSOR < YYLIMIT) {
                switch (*YYCURSOR++) {
                        case '\r':
                                if (*YYCURSOR == '\n') {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        case '\n':
                                CG(zend_lineno)++;
                                break;
                        case '%':
                                if (!CG(asp_tags)) {
                                        continue;
                                }
                                /* fall through */
                        case '?':
                                if (*YYCURSOR == '>') {
                                        YYCURSOR--;
                                        break;
                                }
                                /* fall through */
                        default:
                                continue;
                }

                break;
        }

        yyleng = YYCURSOR - SCNG(yy_text);

        return T_COMMENT;
}

<ST_IN_SCRIPTING>"/*"|"/**"{WHITESPACE} {
        int doc_com;

        if (yyleng > 2) {
                doc_com = 1;
                RESET_DOC_COMMENT();
        } else {
                doc_com = 0;
        }

        while (YYCURSOR < YYLIMIT) {
                if (*YYCURSOR++ == '*' && *YYCURSOR == '/') {
                        break;
                }
        }

        if (YYCURSOR < YYLIMIT) {
                YYCURSOR++;
        } else {
                zend_error(E_COMPILE_WARNING, "Unterminated comment starting line %d", CG(zend_lineno));
        }

        yyleng = YYCURSOR - SCNG(yy_text);
        HANDLE_NEWLINES(yytext, yyleng);

        if (doc_com) {
                CG(doc_comment) = estrndup(yytext, yyleng);
                CG(doc_comment_len) = yyleng;
                return T_DOC_COMMENT;
        }

        return T_COMMENT;
}

<ST_IN_SCRIPTING>("?>"|"</script"{WHITESPACE}*">"){NEWLINE}? {
        zendlval->value.str.val = yytext; /* no copying - intentional */
        zendlval->value.str.len = yyleng;
        zendlval->type = IS_STRING;
        BEGIN(INITIAL);
        return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
}


<ST_IN_SCRIPTING>"%>"{NEWLINE}? {
        if (CG(asp_tags)) {
                BEGIN(INITIAL);
                zendlval->value.str.len = yyleng;
                zendlval->type = IS_STRING;
                zendlval->value.str.val = yytext; /* no copying - intentional */
                return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
        } else {
                yyless(1);
                return yytext[0];
        }
}


<ST_IN_SCRIPTING>b?['] {
        register char *s, *t;
        char *end;
        int bprefix = (yytext[0] != '\'') ? 1 : 0;

        while (1) {
                if (YYCURSOR < YYLIMIT) {
                        if (*YYCURSOR == '\'') {
                                YYCURSOR++;
                                yyleng = YYCURSOR - SCNG(yy_text);

                                break;
                        } else if (*YYCURSOR++ == '\\' && YYCURSOR < YYLIMIT) {
                                YYCURSOR++;
                        }
                } else {
                        yyleng = YYLIMIT - SCNG(yy_text);

                        /* Unclosed single quotes; treat similar to double quotes, but without a separate token
                         * for ' (unrecognized by parser), instead of old flex fallback to "Unexpected character..."
                         * rule, which continued in ST_IN_SCRIPTING state after the quote */
                        return T_ENCAPSED_AND_WHITESPACE;
                }
        }

        zendlval->value.str.val = estrndup(yytext+bprefix+1, yyleng-bprefix-2);
        zendlval->value.str.len = yyleng-bprefix-2;
        zendlval->type = IS_STRING;

        /* convert escape sequences */
        s = t = zendlval->value.str.val;
        end = s+zendlval->value.str.len;
        while (s<end) {
                if (*s=='\\') {
                        s++;

                        switch(*s) {
                                case '\\':
                                case '\'':
                                        *t++ = *s;
                                        zendlval->value.str.len--;
                                        break;
                                default:
                                        *t++ = '\\';
                                        *t++ = *s;
                                        break;
                        }
                } else {
                        *t++ = *s;
                }

                if (*s == '\n' || (*s == '\r' && (*(s+1) != '\n'))) {
                        CG(zend_lineno)++;
                }
                s++;
        }
        *t = 0;

#ifdef ZEND_MULTIBYTE
        if (SCNG(output_filter)) {
                size_t sz = 0;
                s = zendlval->value.str.val;
                SCNG(output_filter)((unsigned char **)&(zendlval->value.str.val), &sz, (unsigned char *)s, (size_t)zendlval->value.str.len);
                zendlval->value.str.len = sz;
                efree(s);
        }
#endif /* ZEND_MULTIBYTE */
        return T_CONSTANT_ENCAPSED_STRING;
}


<ST_IN_SCRIPTING>b?["] {
        int bprefix = (yytext[0] != '"') ? 1 : 0;

        while (YYCURSOR < YYLIMIT) {
                switch (*YYCURSOR++) {
                        case '"':
                                yyleng = YYCURSOR - SCNG(yy_text);
                                zend_scan_escape_string(zendlval, yytext+bprefix+1, yyleng-bprefix-2, '"');
                                return T_CONSTANT_ENCAPSED_STRING;
                        case '$':
                                if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
                                        break;
                                }
                                continue;
                        case '{':
                                if (*YYCURSOR == '$') {
                                        break;
                                }
                                continue;
                        case '\\':
                                if (YYCURSOR < YYLIMIT) {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        default:
                                continue;
                }

                YYCURSOR--;
                break;
        }

        /* Remember how much was scanned to save rescanning */
        SET_DOUBLE_QUOTES_SCANNED_LENGTH(YYCURSOR - SCNG(yy_text) - yyleng);

        YYCURSOR = SCNG(yy_text) + yyleng;

        BEGIN(ST_DOUBLE_QUOTES);
        return '"';
}


<ST_IN_SCRIPTING>b?"<<<"{TABS_AND_SPACES}({LABEL}|([']{LABEL}['])|(["]{LABEL}["])){NEWLINE} {
        char *s;
        int bprefix = (yytext[0] != '<') ? 1 : 0;

        /* save old heredoc label */
        Z_STRVAL_P(zendlval) = CG(heredoc);
        Z_STRLEN_P(zendlval) = CG(heredoc_len);

        CG(zend_lineno)++;
        CG(heredoc_len) = yyleng-bprefix-3-1-(yytext[yyleng-2]=='\r'?1:0);
        s = yytext+bprefix+3;
        while ((*s == ' ') || (*s == '\t')) {
                s++;
                CG(heredoc_len)--;
        }

        if (*s == '\'') {
                s++;
                CG(heredoc_len) -= 2;

                BEGIN(ST_NOWDOC);
        } else {
                if (*s == '"') {
                        s++;
                        CG(heredoc_len) -= 2;
                }

                BEGIN(ST_HEREDOC);
        }

        CG(heredoc) = estrndup(s, CG(heredoc_len));

        /* Check for ending label on the next line */
        if (CG(heredoc_len) < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, s, CG(heredoc_len))) {
                YYCTYPE *end = YYCURSOR + CG(heredoc_len);

                if (*end == ';') {
                        end++;
                }

                if (*end == '\n' || *end == '\r') {
                        BEGIN(ST_END_HEREDOC);
                }
        }

        return T_START_HEREDOC;
}


<ST_IN_SCRIPTING>[`] {
        BEGIN(ST_BACKQUOTE);
        return '`';
}


<ST_END_HEREDOC>{ANY_CHAR} {
        YYCURSOR += CG(heredoc_len) - 1;
        yyleng = CG(heredoc_len);

        Z_STRVAL_P(zendlval) = CG(heredoc);
        Z_STRLEN_P(zendlval) = CG(heredoc_len);
        CG(heredoc) = NULL;
        CG(heredoc_len) = 0;
        BEGIN(ST_IN_SCRIPTING);
        return T_END_HEREDOC;
}


<ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>"{$" {
        zendlval->value.lval = (long) '{';
        yy_push_state(ST_IN_SCRIPTING);
        yyless(1);
        return T_CURLY_OPEN;
}


<ST_DOUBLE_QUOTES>["] {
        BEGIN(ST_IN_SCRIPTING);
        return '"';
}

<ST_BACKQUOTE>[`] {
        BEGIN(ST_IN_SCRIPTING);
        return '`';
}


<ST_DOUBLE_QUOTES>{ANY_CHAR} {
        if (GET_DOUBLE_QUOTES_SCANNED_LENGTH()) {
                YYCURSOR += GET_DOUBLE_QUOTES_SCANNED_LENGTH() - 1;
                SET_DOUBLE_QUOTES_SCANNED_LENGTH(0);

                goto double_quotes_scan_done;
        }

        if (YYCURSOR > YYLIMIT) {
                return 0;
        }
        if (yytext[0] == '\\' && YYCURSOR < YYLIMIT) {
                YYCURSOR++;
        }

        while (YYCURSOR < YYLIMIT) {
                switch (*YYCURSOR++) {
                        case '"':
                                break;
                        case '$':
                                if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
                                        break;
                                }
                                continue;
                        case '{':
                                if (*YYCURSOR == '$') {
                                        break;
                                }
                                continue;
                        case '\\':
                                if (YYCURSOR < YYLIMIT) {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        default:
                                continue;
                }

                YYCURSOR--;
                break;
        }

double_quotes_scan_done:
        yyleng = YYCURSOR - SCNG(yy_text);

        zend_scan_escape_string(zendlval, yytext, yyleng, '"');
        return T_ENCAPSED_AND_WHITESPACE;
}


<ST_BACKQUOTE>{ANY_CHAR} {
        if (YYCURSOR > YYLIMIT) {
                return 0;
        }
        if (yytext[0] == '\\' && YYCURSOR < YYLIMIT) {
                YYCURSOR++;
        }

        while (YYCURSOR < YYLIMIT) {
                switch (*YYCURSOR++) {
                        case '`':
                                break;
                        case '$':
                                if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
                                        break;
                                }
                                continue;
                        case '{':
                                if (*YYCURSOR == '$') {
                                        break;
                                }
                                continue;
                        case '\\':
                                if (YYCURSOR < YYLIMIT) {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        default:
                                continue;
                }

                YYCURSOR--;
                break;
        }

        yyleng = YYCURSOR - SCNG(yy_text);

        zend_scan_escape_string(zendlval, yytext, yyleng, '`');
        return T_ENCAPSED_AND_WHITESPACE;
}


<ST_HEREDOC>{ANY_CHAR} {
        int newline = 0;

        if (YYCURSOR > YYLIMIT) {
                return 0;
        }

        YYCURSOR--;

        while (YYCURSOR < YYLIMIT) {
                switch (*YYCURSOR++) {
                        case '\r':
                                if (*YYCURSOR == '\n') {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        case '\n':
                                /* Check for ending label on the next line */
                                if (IS_LABEL_START(*YYCURSOR) && CG(heredoc_len) < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, CG(heredoc), CG(heredoc_len))) {
                                        YYCTYPE *end = YYCURSOR + CG(heredoc_len);

                                        if (*end == ';') {
                                                end++;
                                        }

                                        if (*end == '\n' || *end == '\r') {
                                                /* newline before label will be subtracted from returned text, but
                                                 * yyleng/yytext will include it, for zend_highlight/strip, tokenizer, etc. */
                                                if (YYCURSOR[-2] == '\r' && YYCURSOR[-1] == '\n') {
                                                        newline = 2; /* Windows newline */
                                                } else {
                                                        newline = 1;
                                                }

                                                CG(increment_lineno) = 1; /* For newline before label */
                                                BEGIN(ST_END_HEREDOC);

                                                goto heredoc_scan_done;
                                        }
                                }
                                continue;
                        case '$':
                                if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
                                        break;
                                }
                                continue;
                        case '{':
                                if (*YYCURSOR == '$') {
                                        break;
                                }
                                continue;
                        case '\\':
                                if (YYCURSOR < YYLIMIT && *YYCURSOR != '\n' && *YYCURSOR != '\r') {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        default:
                                continue;
                }

                YYCURSOR--;
                break;
        }

heredoc_scan_done:
        yyleng = YYCURSOR - SCNG(yy_text);

        zend_scan_escape_string(zendlval, yytext, yyleng - newline, 0);
        return T_ENCAPSED_AND_WHITESPACE;
}


<ST_NOWDOC>{ANY_CHAR} {
        int newline = 0;

        if (YYCURSOR > YYLIMIT) {
                return 0;
        }

        YYCURSOR--;

        while (YYCURSOR < YYLIMIT) {
                switch (*YYCURSOR++) {
                        case '\r':
                                if (*YYCURSOR == '\n') {
                                        YYCURSOR++;
                                }
                                /* fall through */
                        case '\n':
                                /* Check for ending label on the next line */
                                if (IS_LABEL_START(*YYCURSOR) && CG(heredoc_len) < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, CG(heredoc), CG(heredoc_len))) {
                                        YYCTYPE *end = YYCURSOR + CG(heredoc_len);

                                        if (*end == ';') {
                                                end++;
                                        }

                                        if (*end == '\n' || *end == '\r') {
                                                /* newline before label will be subtracted from returned text, but
                                                 * yyleng/yytext will include it, for zend_highlight/strip, tokenizer, etc. */
                                                if (YYCURSOR[-2] == '\r' && YYCURSOR[-1] == '\n') {
                                                        newline = 2; /* Windows newline */
                                                } else {
                                                        newline = 1;
                                                }

                                                CG(increment_lineno) = 1; /* For newline before label */
                                                BEGIN(ST_END_HEREDOC);

                                                goto nowdoc_scan_done;
                                        }
                                }
                                /* fall through */
                        default:
                                continue;
                }
        }

nowdoc_scan_done:
        yyleng = YYCURSOR - SCNG(yy_text);

        zend_copy_value(zendlval, yytext, yyleng - newline);
        zendlval->type = IS_STRING;
        HANDLE_NEWLINES(yytext, yyleng - newline);
        return T_ENCAPSED_AND_WHITESPACE;
}


%%
