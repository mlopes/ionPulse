/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : /Users/svalaskevicius/local/dev/ionPulse/ionParticles/ionPhp/phpParser/ionPhp.g
 *     -                            On : 2011-08-03 22:35:51
 *     -                for the parser : ionPhpParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser ionPhpParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pionPhpParser, which is returned from a call to ionPhpParserNew().
 *
 * The methods in pionPhpParser are  as follows:
 *
 *  - ionPhpParser_prog_return      pionPhpParser->prog(pionPhpParser)
 *  - ionPhpParser_statement_return      pionPhpParser->statement(pionPhpParser)
 *  - ionPhpParser_simpleStatement_return      pionPhpParser->simpleStatement(pionPhpParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ionPhpParser_H
#define _ionPhpParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ionPhpParser_Ctx_struct ionPhpParser, * pionPhpParser;



#include "../ionParserLib.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct ionPhpParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_COMMON_TREE	tree;
   
}
    ionPhpParser_prog_return;

typedef struct ionPhpParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_COMMON_TREE	tree;
   
}
    ionPhpParser_statement_return;

typedef struct ionPhpParser_simpleStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_COMMON_TREE	tree;
   
}
    ionPhpParser_simpleStatement_return;



/** Context tracking structure for ionPhpParser
 */
struct ionPhpParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     ionPhpParser_prog_return (*prog)	(struct ionPhpParser_Ctx_struct * ctx);
     ionPhpParser_statement_return (*statement)	(struct ionPhpParser_Ctx_struct * ctx);
     ionPhpParser_simpleStatement_return (*simpleStatement)	(struct ionPhpParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct ionPhpParser_Ctx_struct * ctx);
    void	    (*free)   (struct ionPhpParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pionPhpParser ionPhpParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pionPhpParser ionPhpParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define SemiColon      4
#define Comma      5
#define OpenBrace      6
#define CloseBrace      7
#define OpenSquareBrace      8
#define CloseSquareBrace      9
#define OpenCurlyBrace      10
#define CloseCurlyBrace      11
#define ArrayAssign      12
#define LogicalOr      13
#define LogicalAnd      14
#define ClassMember      15
#define InstanceMember      16
#define SuppressWarnings      17
#define QuestionMark      18
#define Dollar      19
#define Colon      20
#define Dot      21
#define Ampersand      22
#define Pipe      23
#define Bang      24
#define Plus      25
#define Minus      26
#define Asterisk      27
#define Percent      28
#define Forwardslash      29
#define Tilde      30
#define Equals      31
#define New      32
#define Clone      33
#define Echo      34
#define If      35
#define Else      36
#define ElseIf      37
#define For      38
#define Foreach      39
#define While      40
#define Do      41
#define Switch      42
#define Case      43
#define Default      44
#define Function      45
#define Break      46
#define Continue      47
#define Goto      48
#define Return      49
#define Global      50
#define Static      51
#define And      52
#define Or      53
#define Xor      54
#define Instanceof      55
#define Class      56
#define Interface      57
#define Extends      58
#define Implements      59
#define Abstract      60
#define Var      61
#define Const      62
#define PhpEnd      63
#define PhpStart      64
#define TextContent      65
#define WS      66
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ionPhpParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
