/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : /Users/svalaskevicius/local/dev/ionPulse/ionParticles/ionPhp/phpParser/ionPhp.g
 *     -                            On : 2011-08-03 22:35:51
 *     -                 for the lexer : ionPhpLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer ionPhpLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pionPhpLexer, which is returned from a call to ionPhpLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pionPhpLexer are  as follows:
 *
 *  -  void      pionPhpLexer->SemiColon(pionPhpLexer)
 *  -  void      pionPhpLexer->Comma(pionPhpLexer)
 *  -  void      pionPhpLexer->OpenBrace(pionPhpLexer)
 *  -  void      pionPhpLexer->CloseBrace(pionPhpLexer)
 *  -  void      pionPhpLexer->OpenSquareBrace(pionPhpLexer)
 *  -  void      pionPhpLexer->CloseSquareBrace(pionPhpLexer)
 *  -  void      pionPhpLexer->OpenCurlyBrace(pionPhpLexer)
 *  -  void      pionPhpLexer->CloseCurlyBrace(pionPhpLexer)
 *  -  void      pionPhpLexer->ArrayAssign(pionPhpLexer)
 *  -  void      pionPhpLexer->LogicalOr(pionPhpLexer)
 *  -  void      pionPhpLexer->LogicalAnd(pionPhpLexer)
 *  -  void      pionPhpLexer->ClassMember(pionPhpLexer)
 *  -  void      pionPhpLexer->InstanceMember(pionPhpLexer)
 *  -  void      pionPhpLexer->SuppressWarnings(pionPhpLexer)
 *  -  void      pionPhpLexer->QuestionMark(pionPhpLexer)
 *  -  void      pionPhpLexer->Dollar(pionPhpLexer)
 *  -  void      pionPhpLexer->Colon(pionPhpLexer)
 *  -  void      pionPhpLexer->Dot(pionPhpLexer)
 *  -  void      pionPhpLexer->Ampersand(pionPhpLexer)
 *  -  void      pionPhpLexer->Pipe(pionPhpLexer)
 *  -  void      pionPhpLexer->Bang(pionPhpLexer)
 *  -  void      pionPhpLexer->Plus(pionPhpLexer)
 *  -  void      pionPhpLexer->Minus(pionPhpLexer)
 *  -  void      pionPhpLexer->Asterisk(pionPhpLexer)
 *  -  void      pionPhpLexer->Percent(pionPhpLexer)
 *  -  void      pionPhpLexer->Forwardslash(pionPhpLexer)
 *  -  void      pionPhpLexer->Tilde(pionPhpLexer)
 *  -  void      pionPhpLexer->Equals(pionPhpLexer)
 *  -  void      pionPhpLexer->New(pionPhpLexer)
 *  -  void      pionPhpLexer->Clone(pionPhpLexer)
 *  -  void      pionPhpLexer->Echo(pionPhpLexer)
 *  -  void      pionPhpLexer->If(pionPhpLexer)
 *  -  void      pionPhpLexer->Else(pionPhpLexer)
 *  -  void      pionPhpLexer->ElseIf(pionPhpLexer)
 *  -  void      pionPhpLexer->For(pionPhpLexer)
 *  -  void      pionPhpLexer->Foreach(pionPhpLexer)
 *  -  void      pionPhpLexer->While(pionPhpLexer)
 *  -  void      pionPhpLexer->Do(pionPhpLexer)
 *  -  void      pionPhpLexer->Switch(pionPhpLexer)
 *  -  void      pionPhpLexer->Case(pionPhpLexer)
 *  -  void      pionPhpLexer->Default(pionPhpLexer)
 *  -  void      pionPhpLexer->Function(pionPhpLexer)
 *  -  void      pionPhpLexer->Break(pionPhpLexer)
 *  -  void      pionPhpLexer->Continue(pionPhpLexer)
 *  -  void      pionPhpLexer->Goto(pionPhpLexer)
 *  -  void      pionPhpLexer->Return(pionPhpLexer)
 *  -  void      pionPhpLexer->Global(pionPhpLexer)
 *  -  void      pionPhpLexer->Static(pionPhpLexer)
 *  -  void      pionPhpLexer->And(pionPhpLexer)
 *  -  void      pionPhpLexer->Or(pionPhpLexer)
 *  -  void      pionPhpLexer->Xor(pionPhpLexer)
 *  -  void      pionPhpLexer->Instanceof(pionPhpLexer)
 *  -  void      pionPhpLexer->Class(pionPhpLexer)
 *  -  void      pionPhpLexer->Interface(pionPhpLexer)
 *  -  void      pionPhpLexer->Extends(pionPhpLexer)
 *  -  void      pionPhpLexer->Implements(pionPhpLexer)
 *  -  void      pionPhpLexer->Abstract(pionPhpLexer)
 *  -  void      pionPhpLexer->Var(pionPhpLexer)
 *  -  void      pionPhpLexer->Const(pionPhpLexer)
 *  -  void      pionPhpLexer->PhpEnd(pionPhpLexer)
 *  -  void      pionPhpLexer->PhpStart(pionPhpLexer)
 *  -  void      pionPhpLexer->TextContent(pionPhpLexer)
 *  -  void      pionPhpLexer->WS(pionPhpLexer)
 *  -  void      pionPhpLexer->Tokens(pionPhpLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ionPhpLexer_H
#define _ionPhpLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ionPhpLexer_Ctx_struct ionPhpLexer, * pionPhpLexer;



#include "../ionParserLib.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for ionPhpLexer
 */
struct ionPhpLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mSemiColon)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mComma)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mOpenBrace)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mCloseBrace)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mOpenSquareBrace)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mCloseSquareBrace)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mOpenCurlyBrace)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mCloseCurlyBrace)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mArrayAssign)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mLogicalOr)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mLogicalAnd)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mClassMember)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mInstanceMember)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mSuppressWarnings)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mQuestionMark)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mDollar)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mColon)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mDot)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mAmpersand)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mPipe)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mBang)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mPlus)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mMinus)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mAsterisk)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mPercent)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mForwardslash)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mTilde)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mEquals)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mNew)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mClone)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mEcho)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mIf)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mElse)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mElseIf)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mFor)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mForeach)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mWhile)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mDo)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mSwitch)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mCase)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mDefault)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mFunction)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mBreak)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mContinue)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mGoto)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mReturn)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mGlobal)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mStatic)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mAnd)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mOr)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mXor)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mInstanceof)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mClass)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mInterface)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mExtends)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mImplements)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mAbstract)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mVar)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mConst)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mPhpEnd)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mPhpStart)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mTextContent)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mWS)	(struct ionPhpLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct ionPhpLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct ionPhpLexer_Ctx_struct * ctx);
    void	    (*free)   (struct ionPhpLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pionPhpLexer ionPhpLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pionPhpLexer ionPhpLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define SemiColon      4
#define Comma      5
#define OpenBrace      6
#define CloseBrace      7
#define OpenSquareBrace      8
#define CloseSquareBrace      9
#define OpenCurlyBrace      10
#define CloseCurlyBrace      11
#define ArrayAssign      12
#define LogicalOr      13
#define LogicalAnd      14
#define ClassMember      15
#define InstanceMember      16
#define SuppressWarnings      17
#define QuestionMark      18
#define Dollar      19
#define Colon      20
#define Dot      21
#define Ampersand      22
#define Pipe      23
#define Bang      24
#define Plus      25
#define Minus      26
#define Asterisk      27
#define Percent      28
#define Forwardslash      29
#define Tilde      30
#define Equals      31
#define New      32
#define Clone      33
#define Echo      34
#define If      35
#define Else      36
#define ElseIf      37
#define For      38
#define Foreach      39
#define While      40
#define Do      41
#define Switch      42
#define Case      43
#define Default      44
#define Function      45
#define Break      46
#define Continue      47
#define Goto      48
#define Return      49
#define Global      50
#define Static      51
#define And      52
#define Or      53
#define Xor      54
#define Instanceof      55
#define Class      56
#define Interface      57
#define Extends      58
#define Implements      59
#define Abstract      60
#define Var      61
#define Const      62
#define PhpEnd      63
#define PhpStart      64
#define TextContent      65
#define WS      66
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ionPhpLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
